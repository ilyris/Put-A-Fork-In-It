{"version":3,"sources":["componets/Details.js","componets/SearchBox.js","componets/Recipe.js","componets/Home.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","_ref","match","_location$state$recip","location","state","recipeArray","calories","ingredients","image","source","label","console","log","listItems","map","listOfIngredients","react_default","a","createElement","Li","text","StyledLink","to","H2","InformationContainer","Image","src","Ul","styled","h2","_templateObject","Link","_templateObject2","div","_templateObject3","img","_templateObject4","ul","_templateObject5","li","_templateObject6","SearchBoxWrapper","SearchBox_templateObject","SubmitButton","button","SearchBox_templateObject2","InputSearchField","input","SearchBox_templateObject3","SearchBox","submitUsersRecipe","searchChange","type","placeholder","onChange","onClick","TitleHeading","Recipe_templateObject","Recipe_templateObject2","ContentContainer","Recipe_templateObject3","ButtonWrapper","Recipe_templateObject4","Button","Recipe_templateObject5","Recipe","props","title","Recipe_Image","pathname","concat","Home","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","searchfield","setSearchField","fetchApiCall","asyncToGenerator","regenerator_default","mark","_callee","getResponse","data","wrap","_context","prev","next","fetch","process","sent","json","hits","stop","apply","this","arguments","AppWrapper","Title","id","componets_SearchBox","event","target","value","preventDefault","RecipeWrapper","recipe","componets_Recipe","key","Home_templateObject","h1","Home_templateObject2","Home_templateObject3","App","react_router_dom","react_router","exact","path","component","Details","Boolean","window","hostname","require","config","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d41d00aa.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {withRouter, Link} from 'react-router-dom';\r\n\r\n\r\nconst Details = ({match, location}) =>  { \r\n    const {calories, ingredients, source, image, label} = location.state.recipeArray;\r\n    console.log(ingredients);\r\n    const listItems = ingredients.map( listOfIngredients => <Li>{listOfIngredients.text}</Li>);\r\n    return  (\r\n        <div>\r\n            <StyledLink to=\"/\">Home</StyledLink>\r\n            <H2>Recipe: {label}</H2>\r\n            <InformationContainer>\r\n                <Image src={image} />\r\n                <Ul>{listItems}</Ul>\r\n            </InformationContainer>\r\n\r\n            <p>{calories}</p>\r\n        </div>\r\n        );\r\n}\r\n\r\n\r\nexport default withRouter(Details);\r\n\r\n\r\nconst H2 = styled.h2 `\r\n    font-size: 3rem;\r\n    color: #fff;\r\n    text-align: center;\r\n    margin: 20px 0 30px 0;\r\n`;\r\nconst StyledLink = styled(Link) `\r\n    text-decoration: none;\r\n    font-size: 1.6rem;\r\n    margin: 20px 0 0 10px;\r\n    color: #fff;\r\n`;\r\nconst InformationContainer = styled.div `\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n`;\r\nconst Image = styled.img`\r\n  border-radius: 0;\r\n  width: 700px;\r\n  margin: 0 100px;\r\n`;\r\nconst Ul = styled.ul `\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 50%;\r\n`;\r\nconst Li = styled.li `\r\n    list-style: none;\r\n    padding: 10px 0 15px 0;\r\n    font-size: 1.6rem;\r\n    color: #fff;\r\n    border-bottom: 1px solid #d6d6d6;\r\n    letter-spacing: 1px;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst SearchBox = ({submitUsersRecipe, searchChange}) => {\r\n    return(\r\n        <SearchBoxWrapper>\r\n            <InputSearchField type=\"search\" placeholder=\"search recipe\" onChange={searchChange}></InputSearchField>\r\n            <SubmitButton onClick={submitUsersRecipe}>Search</SubmitButton>\r\n        </SearchBoxWrapper>\r\n\r\n    );\r\n}\r\n\r\nconst SearchBoxWrapper = styled.div `\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst SubmitButton = styled.button `\r\n    font-size: 1.8rem;\r\n    color: white;\r\n    padding: 10px 15px;\r\n    text-align: center;\r\n    letter-spacing: 2px;\r\n    background-color: #000;\r\n    border: none;\r\n    outline: none;\r\n    margin-left: 20px;\r\n    border-radius: 10px;\r\n    transition: all ease-in-out 300ms;\r\n`;\r\n\r\nconst InputSearchField = styled.input `\r\n    height: 100%;\r\n    font-size: 1.8rem;\r\n    padding: 10px;\r\n    border: none;\r\n    outline: none;\r\n    background-color: rgba(0,0,0,0);\r\n    border-bottom: 3px solid #fff;\r\n    color: #fff;\r\n    padding-left: 0;\r\n`;\r\n\r\nexport default SearchBox;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Recipe = ({ title, image, recipeArray }, props) => {\r\n  return (\r\n    <ContentContainer>\r\n      <TitleHeading>{title}</TitleHeading>\r\n      <Image src={image} />\r\n      <ButtonWrapper>\r\n          <Button to={{ pathname: `/${recipeArray.label}`,\r\n          state: {recipeArray}}}>Details</Button>\r\n      </ButtonWrapper>\r\n    </ContentContainer>\r\n  );\r\n};\r\n\r\nconst TitleHeading = styled.h2`\r\n  font-size: 1.8rem;\r\n  letter-spacing: 1px;\r\n  color: #fff;\r\n  padding: 10px 0;\r\n  text-transform: capitalize;\r\n  text-align: center;\r\n  width: 100%;\r\n  background: #673AB7;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 100%;\r\n`;\r\nconst ContentContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  border: 2px solid #d6d6d6;\r\n  margin-top: 20px;\r\n  width: 30%;\r\n  min-width: 300px;\r\n  min-height: 400px;\r\n  background-color: #d6d6d6;\r\n  box-shadow: 0px 14px 20px 6px #515151\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 20px;\r\n  justify-content: flex-end;\r\n`;\r\nconst Button = styled(Link)`\r\n  color: #000;\r\n  font-size: 2rem;\r\n  background-color: rgb(46, 206, 255);\r\n  color: #fff;\r\n  margin-right: 50px;\r\n  padding: 10px 15px;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n  text-decoration: none;\r\n  box-shadow: 1px 2px 5px 2px #3a3a3a80;\r\n`;\r\n\r\nexport default Recipe;\r\n","\r\nimport styled from \"styled-components\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport Recipe from \"./Recipe\";\r\nimport React, { useState} from \"react\";\r\n\r\nconst Home = () => {\r\n\r\n  const api_Key = process.env.REACT_APP_API_KEY;\r\n  const api_Id = process.env.REACT_APP_API_ID;\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [searchfield, setSearchField] = useState(\"\");\r\n\r\n  const fetchApiCall = async () => {\r\n    const getResponse = await fetch(\r\n      `https://api.edamam.com/search?q=${searchfield}&app_id=${api_Id}&app_key=${api_Key}`\r\n    );\r\n    const data = await getResponse.json();\r\n    setRecipes(data.hits);\r\n  };\r\n\r\n  const searchChange = event => {\r\n    setSearchField(event.target.value);\r\n  };\r\n\r\n  const submitUsersRecipe = event => {\r\n    event.preventDefault();\r\n    fetchApiCall();\r\n  };\r\n\r\n  return(\r\n    <AppWrapper>\r\n      <Title id=\"companyName\">Put A Fork In It</Title>\r\n      <SearchBox\r\n        searchChange={searchChange}\r\n        submitUsersRecipe={submitUsersRecipe}\r\n      />\r\n      <RecipeWrapper>\r\n        {recipes.map(recipe => {\r\n          return (\r\n            <Recipe\r\n              key={recipe.recipe.label}\r\n              title={recipe.recipe.label}\r\n              image={recipe.recipe.image}\r\n              recipeArray={recipe.recipe}\r\n            />\r\n          );\r\n        })}\r\n      </RecipeWrapper>\r\n    </AppWrapper>\r\n  )\r\n}\r\nexport default Home;\r\n\r\n\r\n\r\nconst AppWrapper = styled.div`\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  padding: 20px;\r\n  height: 100%;\r\n  background: rgb(146, 146, 146);\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 4rem;\r\n  color: #fff;\r\n  width: 100%;\r\n  text-align: center;\r\n  padding-bottom: 20px;\r\n  letter-spacing: 1px;\r\n`;\r\n\r\nconst RecipeWrapper = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  margin-top: 50px;\r\n`;","import React from \"react\";\nimport \"./App.css\";\nimport Details from './componets/Details';\nimport Home from './componets/Home';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\n\n\nconst App = () => {\n  return (\n    <Router>\n      <Route exact path =\"/\" component={Home} />\n      <Route exact path=\"/:id\" component={Details} />\n    </Router>\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}