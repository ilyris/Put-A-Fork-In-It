{"version":3,"sources":["componets/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","submitUsersRecipe","searchChange","react_default","a","createElement","type","placeholder","onChange","onClick","App","_useState","useState","_useState2","Object","slicedToArray","setRecipes","_useState3","_useState4","searchfield","setSearchField","fetchApiCall","fetch","concat","then","response","json","recipes","console","log","id","componets_SearchBox","event","target","value","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gKAaeA,SAVG,SAAAC,GAAuC,IAArCC,EAAqCD,EAArCC,kBAAmBC,EAAkBF,EAAlBE,aACnC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASC,YAAY,gBAAgBC,SAAUN,IAC3DC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASG,QAASR,OC8B3BS,EAjCH,WAAM,IAAAC,EAEcC,mBAAS,IAFvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEAK,GAFAH,EAAA,GAAAA,EAAA,IAAAI,EAGsBL,mBAAS,IAH/BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGTE,EAHSD,EAAA,GAGIE,EAHJF,EAAA,GAaVG,EAAe,WACnBC,MAAK,kCAAAC,OAAmCJ,EAAnC,8DACJK,KAAM,SAAAC,GACL,OAAOA,EAASC,SAGjBF,KAAM,SAAAG,GACLC,QAAQC,IAAIF,GACZX,EAAW,CAACW,QAASA,OAIvB,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIyB,GAAG,eAAP,oBACA3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAW7B,aAvBI,SAAA8B,GACnBZ,EAAe,CAACD,YAAaa,EAAMC,OAAOC,SAsBCjC,kBAnBnB,SAAC+B,GACzBA,EAAMG,iBACNd,SCHgBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.7a13aac7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst SearchBox = ({submitUsersRecipe, searchChange}) => {\r\n    return(\r\n        <div>\r\n            <input type=\"search\" placeholder=\"search recipe\" onChange={searchChange} />\r\n            <input type=\"submit\" onClick={submitUsersRecipe}/>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { useState } from 'react';\nimport './App.css';\nimport SearchBox from \"./componets/SearchBox\";\n\nconst App = () => {\n\n  const [recipes, setRecipes] = useState([]);\n  const [searchfield, setSearchField] = useState('');\n\n  const searchChange = event => {\n    setSearchField({searchfield: event.target.value});\n  } \n\n  const submitUsersRecipe = (event) =>  {\n    event.preventDefault();\n    fetchApiCall();\n  }\n  const fetchApiCall = ()  => {\n    fetch(`http://api.edamam.com/search?q=${searchfield}&app_id=4298945d&app_key=ad5979247966b4cff1201bbc13ff7be6`)\n    .then( response =>  {\n      return response.json();\n\n    })\n    .then( recipes =>  {\n      console.log(recipes);\n      setRecipes({recipes: recipes});\n    }\n      );\n  }\n    return (\n      <div>\n        <h1 id=\"companyName\">Put A Fork In It</h1>\n        <SearchBox searchChange={searchChange} submitUsersRecipe={submitUsersRecipe}/>\n      </div>\n    );\n    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}